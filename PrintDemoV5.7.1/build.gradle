apply plugin: 'com.android.application'
def keystoreFilepath = ''
def keystorePSW = ''
def keystoreAlias = ''
def keystoreAliasPSW = ''
// default keystore file, PLZ config file path in local.properties
def keyfile = file('s.keystore.temp')
Properties properties = new Properties()
// local.properties file in the root director
properties.load(project.rootProject.file('local.properties').newDataInputStream())
keystoreFilepath = properties.getProperty("keystore.path")
if (keystoreFilepath) {
    keystorePSW = properties.getProperty("keystore.password")
    keystoreAlias = properties.getProperty("keystore.alias")
    keystoreAliasPSW = properties.getProperty("keystore.alias_password")
    keyfile = file(keystoreFilepath)
}
android {
    compileSdk 32
    defaultConfig {
        applicationId "com.printer.demo"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "5.7.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
//        ndk {
//            abiFilters "armeabi", "armeabi-v7a", "x86"
//        }
    }
    //多渠道打包
    flavorDimensions "tier","minApi"
    productFlavors {
        yingyongbao {
            dimension "tier"
        }
        huawei {
            dimension "tier"
        }
        baidu {
            dimension "tier"
        }
        xiaomi {
            dimension "minApi"
        }
        qh360 {
            dimension "minApi"
        }
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }


    signingConfigs {
        release {
            keyAlias keystoreAlias
            keyPassword keystoreAliasPSW
            storeFile keyfile
            storePassword keystorePSW
            println("====== signingConfigs.debug ======")
        }

        debug {
//            keyAlias keystoreAlias
//            keyPassword keystoreAliasPSW
//            storeFile keyfile
//            storePassword keystorePSW
//            println("====== signingConfigs.debug ======")
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }


    buildTypes {
        release {
            debuggable true
            //是否混淆
            minifyEnabled false
            //是否移除无用资源
            zipAlignEnabled true
            //混淆配置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名文件存在，则签名
            if (keyfile.exists()) {
                println("WITH -> buildTypes -> release: using jks key")
                signingConfig signingConfigs.release
            }else {
                println("WITH -> buildTypes -> release: using default key")
            }

            //自定义打包时apk名称
            applicationVariants.all { variant ->
                variant.outputs.all { output ->// each 改为 all
                    def fileName = "${variant.versionName}_${variant.productFlavors[0].name}_release.apk"
                    def outFile = output.outputFile
                    if (outFile != null && outFile.name.endsWith('.apk')) {
                        outputFileName = fileName  //  output.outputFile 改为 outputFileName
                        //或者 outputFileName = new File(outFile.parent, fileName).getName()
                    }
                }
            }
        }
        debug {
            println("====== buildTypes.debug ======")
            //签名文件存在，则签名
            if (keyfile.exists()) {
                println("WITH -> buildTypes -> release: using jks key")
                signingConfig signingConfigs.release
            }else {
                println("WITH -> buildTypes -> release: using default key")
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation files('libs\\printersdkv5.7.2.jar')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
